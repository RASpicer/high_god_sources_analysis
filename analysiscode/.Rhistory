panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")+
stat_compare_means(method = 't.test')
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.5)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none") +
stat_compare_means(method = 't.test')
install.packages('ggsignif')
library(ggsignif)
ggplot(data3, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge") +
#geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),width=.2,position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(data3, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
#geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),width=.2,position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")+
geom_signif(comparisons = list(c("versicolor", "virginica")),
map_signif_level=TRUE)
ggplot(data3, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
#geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),width=.2,position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")+
stat_compare_means(method = 't.test')
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.5)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
t.test(Satisfaction ~ Gender, data3)
# calculate significance
ttest <- t.test(Satisfaction ~ Gender, data3)
ttest$p.value
pvalue <- round(ttest$p.value, 2)
pvalue <- round(ttest$p.value, 5)
pvalue <- ttest$p.value
class(pvalue)
pvalue <- signif(ttest$p.value,3)
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.5)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
# add comparison lines
geom_segment(aes(x = 1, y = 6.2, xend = 2, yend = 6.2)) +
# change theme
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
# add comparison lines
geom_segment(aes(x = 1, y = 6.5, xend = 2, yend = 6.5)) +
geom_segment(aes(x = 1, y = 6.3, xend = 1, yend = 6.5)) +
geom_segment(aes(x = 2, y = 6.3, xend = 2, yend = 6.5)) +
# change theme
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
pvalue <- as.character(signif(ttest$p.value,3))
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
# add comparison lines
geom_segment(aes(x = 1, y = 6.5, xend = 2, yend = 6.5)) +
geom_segment(aes(x = 1, y = 6.3, xend = 1, yend = 6.5)) +
geom_segment(aes(x = 2, y = 6.3, xend = 2, yend = 6.5)) +
# add text
annotate("text", x=1.5, y=6.6, label= pvalue) +
# change theme
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
# add comparison lines
geom_segment(aes(x = 1, y = 6.5, xend = 2, yend = 6.5)) +
geom_segment(aes(x = 1, y = 6.3, xend = 1, yend = 6.5)) +
geom_segment(aes(x = 2, y = 6.3, xend = 2, yend = 6.5)) +
# add text
annotate("text", x=1.5, y=6.7, label= pvalue) +
# change theme
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(tgc, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 6.8)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
# add comparison lines
geom_segment(aes(x = 1, y = 6.5, xend = 2, yend = 6.5)) +
geom_segment(aes(x = 1, y = 6.3, xend = 1, yend = 6.5)) +
geom_segment(aes(x = 2, y = 6.3, xend = 2, yend = 6.5)) +
# add text
annotate("text", x=1.5, y=6.7, label= pvalue) +
# change theme
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(data3, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
#geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),width=.2,position=position_dodge(.9)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")+
stat_compare_means(method = 't.test')
ggplot(data3, aes(x=Gender, y=Satisfaction, fill=Gender)) +
geom_bar(position=position_dodge(), stat="identity") +
#geom_errorbar(aes(ymin=Satisfaction-se, ymax=Satisfaction+se),width=.2,position=position_dodge(.9)) +
#scale_y_continuous(expand = c(0, 0), limits = c(0, 7)) +
scale_fill_manual(values = c('#66c2a5','#8da0cb'))+
theme_bw() +
theme(axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position="none")+
stat_compare_means(method = 't.test')
library(rvest)
data <- read.html("~/Downloads/Seshat HTML archive 20190323/big-island-hawaii/big-island-of-hawaii-Hawaii1.html")
data <- read_html("~/Downloads/Seshat HTML archive 20190323/big-island-hawaii/big-island-of-hawaii-Hawaii1.html")
View(data)
library(tidyverse)
test <- data %>%
html_nodes("h1")
test <- data %>%
html_nodes("p")
View(test)
setwd("~/git/seshat-analysis-replication/MHG/analysiscode/")
seshat <- read.csv('../data/exportdat.csv', stringsAsFactors = FALSE)
polities <- read.csv('../data/polities.csv', stringsAsFactors = FALSE)
high_god_source <- read.csv('../data/HighGodSourceRaw.csv', stringsAsFactors = FALSE)
# Remove polities not used in the original research
#### Remove new NGAs
polities <- polities[polities$NGA != "Crete",]
polities <- polities[polities$NGA != "Galilee",]
polities <- polities[polities$NGA != "Middle Ganga",]
#### Remove low-coverage polities causing bugs in C. Java)
polities <- polities[polities$PolID != "IdCJBun",]
polities <- polities[polities$PolID != "IdKalin",]
polities <- polities[polities$PolID != "EsHabsb",]
#### Remove post-colonial polities (also see below for removing post-colonial polities from NGAs with only 2 polities)
polities <- polities[polities$PolID != "USIllinL",]
polities <- polities[polities$PolID != "GbEmpir",]
polities <- polities[polities$PolID != "InEInCo",]
polities <- polities[polities$PolID != "InBritP",]
polities <- polities[polities$PolID != "RuYakuL",]
polities <- polities[polities$PolID != "UsIroqL",]
# Combine source data with polity data
high_god_pol <- left_join(high_god_source, polities)
# extract seshat data on Moralising High Gods
HighGod <- seshat[grep("High God", seshat$Variable),]
colnames(HighGod)[2] <- "PolID"
library(plyr)
library(tidyverse)
# Combine source data with polity data
high_god_pol <- left_join(high_god_source, polities)
# extract seshat data on Moralising High Gods
HighGod <- seshat[grep("High God", seshat$Variable),]
colnames(HighGod)[2] <- "PolID"
# Combine with Values
high_god_data <- left_join(high_god_pol, HighGod)
# Convert to numeric for calculating MHG
high_god_data$Value.No <- revalue(high_god_data$Value.From, c(
"absent" = "0",
"inactive" = "1",
"active" = "2",
"moralizing" = "3",
"monotheistic" = "1",
"polytheistic" = "2",
"not applicable" = "unknown",
"suspected unknown" = "unknown"))
# replace unknown with NA
high_god_data$Value.No[high_god_data$Value.No == "unknown"] <- NA
# calculate MHG values
high_god_data$MoralisingHighGods <- ifelse(high_god_data$Value.No == 3, 1, 0)
# Change BCE to negative years and remove CE.
# Start date
high_god_data$Date.From <- if_else(grepl("B", high_god_data$Date.From), paste0("-",high_god_data$Date.From), high_god_data$Date.From)
high_god_data$Date.From <- gsub("BCE", "", high_god_data$Date.From)
high_god_data$Date.From <- gsub("CE", "", high_god_data$Date.From)
# End date
high_god_data$Date.To <- if_else(grepl("B", high_god_data$Date.To), paste0("-",high_god_data$Date.To), high_god_data$Date.To)
high_god_data$Date.To <- gsub("BCE", "", high_god_data$Date.To)
high_god_data$Date.To <- gsub("CE", "", high_god_data$Date.To)
# if there is a data range, replace start and end dates with these values
high_god_data$Start.Date <- as.numeric(ifelse(high_god_data$Date.From != "", high_god_data$Date.From, high_god_data$Start))
high_god_data$End.Date <- as.numeric(ifelse(high_god_data$Date.To != "" | is.na(high_god_data$Date.From) == TRUE, high_god_data$Date.To, high_god_data$End))
# if there is
high_god_data$Start.Date <- as.numeric(ifelse(is.na(high_god_data$Date.From) == TRUE, high_god_data$Start, high_god_data$Start.Date))
high_god_data$End.Date <- as.numeric(ifelse(is.na(high_god_data$Date.To) == TRUE, high_god_data$End, high_god_data$End.Date))
# select and reorder annotated high gods source data
HighGodOut <- high_god_data %>%
select(NGA, PolID, Start.Date, End.Date, Value.From, Value.No, MoralisingHighGods, Text, Number) %>%
rename(HighGods = Value.From, HighGods.No = Value.No, SourceText = Text)
View(polities)
116/nrow(329)*100
116/nrow(high_god_source)*100
View(high_god_source)
View(high_god_data)
high_god_data_sub <- high_god_data[!is.na(high_god_data$Start.Date),]
View(high_god_data_sub)
sum(is.na(high_god_data_sub$Number))
na <- high_god_data_sub[is.na(high_god_data_sub$Number),]
View(na)
94+5+12
test <- high_god_data_sub[high_god_data_sub$PolID %in% polities$PolName]
test <- high_god_data_sub[high_god_data_sub$PolID %in% polities$PolName,]
polities2 <- polities[polities$Dupl == "n",]
test <- high_god_data_sub[high_god_data_sub$PolID %in% polities2\$PolName,]
test <- high_god_data_sub[high_god_data_sub$PolID %in% polities2$PolName,]
na2 <- high_god_data_sub[is.na(high_god_data_sub$Value.From),]
View(na2)
View(high_god_data_sub)
na2 <- high_god_data_sub[is.na(high_god_data_sub$Value.No),]
View(na2)
na3 <- na2[!is.na(na2$Number),]
View(na3)
View(na)
high_god_data$Start.Date <- as.numeric(ifelse(high_god_data$Date.From != "", high_god_data$Date.From, high_god_data$Start))
high_god_data$End.Date <- as.numeric(ifelse(high_god_data$Date.To != "" | is.na(high_god_data$Date.From) == TRUE, high_god_data$Date.To, high_god_data$End))
View(high_god_data)
View(high_god_data)
ggplot(data=high_god_data_sub, aes(x=Start.Date, y=reorder(NGA,-Start.Date), color = MoralisingHighGods)) +
geom_segment(aes(xend=End.Date, yend=NGA), linetype=1, size=2) +
scale_x_continuous(breaks=c(-10000,-8000,-6000,-4000,-2000,0,2000)) +
#scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "black"), na.value= "#999999") +
#scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#6a3d9a", "#b2df8a", "black"), na.value= "#999999") +
xlab("Year") +
ylab("NGA") +
theme_bw() +
theme(
axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
class(high_god_data_sub$MoralisingHighGods)
ggplot(data=high_god_data_sub, aes(x=Start.Date, y=reorder(NGA,-Start.Date), color = MoralisingHighGods)) +
geom_segment(aes(xend=End.Date, yend=NGA), linetype=1, size=2) +
scale_x_continuous(breaks=c(-10000,-8000,-6000,-4000,-2000,0,2000)) +
scale_color_manual(values = c("#E69F00", "#56B4E9"), na.value= "#999999") +
#scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "black"), na.value= "#999999") +
#scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#6a3d9a", "#b2df8a", "black"), na.value= "#999999") +
xlab("Year") +
ylab("NGA") +
theme_bw() +
theme(
axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
ggplot(data=high_god_data_sub, aes(x=Start.Date, y=reorder(NGA,-Start.Date), color = as.factor(MoralisingHighGods))) +
geom_segment(aes(xend=End.Date, yend=NGA), linetype=1, size=2) +
scale_x_continuous(breaks=c(-10000,-8000,-6000,-4000,-2000,0,2000)) +
scale_color_manual(values = c("#E69F00", "#56B4E9"), na.value= "#999999") +
#scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "black"), na.value= "#999999") +
#scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#6a3d9a", "#b2df8a", "black"), na.value= "#999999") +
xlab("Year") +
ylab("NGA") +
theme_bw() +
theme(
axis.text = element_text(colour = "black"),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
Impdat <- read.csv("~/git/seshat-analysis-replication/moralizing-gods_050319/ImpDatReplGit.csv")
View(Impdat)
test <- as.data.frame(table(Impdat$MoralisingHighGods))
View(test)
imp <- Impdat[Impdat$irep == 1,]
test <- as.data.frame(table(Impdat$MoralisingHighGods))
View(test)
test <- as.data.frame(table(imp$MoralisingHighGods))
View(test)
test <- as.data.frame(table(as.factor(imp$MoralisingHighGods)))
View(test)
test <- as.data.frame(table(as.factor(imp$MoralisingGods)))
View(test)
Test2 <- imp[imp$MoralisingHighGods == 0 & is.na(imp&GeneralMoralisticPunishment),]
Test2 <- imp[imp$MoralisingHighGods == 0 & is.na(imp$GeneralMoralisticPunishment),]
View(Test2)
Test2 <- imp[imp$MoralisingHighGods == "0" & is.na(imp$GeneralMoralisticPunishment),]
View(Test2)
Test2 <- imp[imp$MoralisingHighGods == "0",]
View(Test2)
View(imp)
Test2 <- imp[imp$MoralisingHighGods == 0,]
View(Test2)
comb <- paste(imp$GeneralMoralisticPunishment, imp$MoralisingHighGods, imp$MoralisingGods)
Test2 <- as.data.frame(table(comb))
View(Test2)
sum(Test2$Freq)
11/414
22/414
22/414 * 100
sum(is.na(imp))
414*29
4196/12006
View(Impdat)
writing <- paste(imp$NGA, imp$PolID, imp$Time, imp$MoralisingGods, imp$DoctrinalMode, imp$Writing)
test <- as.data.frame(writing)
View(test)
seshat <- read.csv('../data/exportdat.csv', stringsAsFactors = FALSE)
high_god_source <- read.csv('../data/HighGodSourceRaw.csv', stringsAsFactors = FALSE)
View(seshat)
polities <- read.csv('../data/polities.csv', stringsAsFactors = FALSE)
# Remove polities not used in the original research
#### Remove new NGAs
polities <- polities[polities$NGA != "Crete",]
polities <- polities[polities$NGA != "Galilee",]
polities <- polities[polities$NGA != "Middle Ganga",]
#### Remove low-coverage polities causing bugs in C. Java)
polities <- polities[polities$PolID != "IdCJBun",]
polities <- polities[polities$PolID != "IdKalin",]
polities <- polities[polities$PolID != "EsHabsb",]
#### Remove post-colonial polities (also see below for removing post-colonial polities from NGAs with only 2 polities)
polities <- polities[polities$PolID != "USIllinL",]
polities <- polities[polities$PolID != "GbEmpir",]
polities <- polities[polities$PolID != "InEInCo",]
polities <- polities[polities$PolID != "InBritP",]
polities <- polities[polities$PolID != "RuYakuL",]
polities <- polities[polities$PolID != "UsIroqL",]
View(polities)
MIOut <- read.csv('../data/MIoutput.csv', stringsAsFactors = FALSE)
View(MIOut)
library(tidyverse)
variables <- read.csv("~/git/seshat-analysis-replication/moralizing-gods_050319/variables.csv", stringsAsFactors = F)
View(variables)
MI_write <- MIOut %>%
select(NGA, PolID, Date, Mnemonic, NonWRecord, WRecord, Script, NonWRecord, PhAlph, Lists, writing, WrittenRecords, Writing)
View(MIOut)
MI_write <- MIOut %>%
select(NGA, PolID, Date, Mnemonic, NonWRecord, WRecord, Script, NonWRecord, PhAlph, Lists, writing)
View(MIOut)
MI_write <- MIOut %>%
select(NGA, PolID, Date, Mnemonic, NonWRecord, WRecord, Script, NonWRecord, PhAlph, Lists)
View(MI_write)
MI_write$Writing <- ifelse(MI_write$WRecord>0.1,1,0)
View(MI_write)
View(seshat)
View(polities)
polities <- read.csv('../data/polities.csv', stringsAsFactors = FALSE)
View(polities)
View(polities)
MI_write <- MIOut %>%
select(NGA, PolID, Date, Mnemonic, NonWRecord, WRecord, Script, NonWRecord, PhAlph, Lists, HighGods)
# Writing
MI_write$Writing <- ifelse(MI_write$WRecord>0.1,1,0)
View(MI_write)
MI_write <- MIOut %>%
select(NGA, PolID, Date, Mnemonic, NonWRecord, WRecord, Script, NonWRecord, PhAlph, Lists, HighGods, SEFair, SERecip, SEIngroup) %>%
# Big Gods: MHG "MHG" - HighGods
mutate(MHG = HighGods) %>%
# BSP (SEFair SERecip SEIngroup)
mutate(BSP = rowMeans(select(., SEFair, SERecip, SEIngroup), na.rm = TRUE))  %>%
# General Moralistic Punishment
mutate(GeneralMoralisticPunishment = ifelse(BSP > 0.1, 1, 0)) %>%
# Moralising High Gods
mutate(MoralisingHighGods = ifelse(MHG == 3, 1, 0)) %>%
# Moralising Gods
mutate(MoralisingGods = ifelse(GeneralMoralisticPunishment > 0.1 | MoralisingHighGods > 0.1, 1, 0))
View(MI_write)
MI_write$Writing <- ifelse(MI_write$WRecord>0.1,1,0)
MI_write_sub <- MI_write %>%
select(NGA, Polity, Date, Writing, MoralisingGods)
MI_write_sub <- MI_write %>%
select(NGA, PolID, Date, Writing, MoralisingGods)
View(MI_write_sub)
MI_write_sub <- MI_write %>%
select(NGA, PolID, Date, MoralisingGods, Writing)
